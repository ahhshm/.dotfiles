Comment({ fg = c.comment, style = config.commentStyle }) -- any comment
ColorColumn({ bg = c.black }) -- used for the columns set with 'colorcolumn'
Conceal({ fg = c.dark5 }) -- placeholder characters substituted for concealed text (see 'conceallevel')
Cursor({ fg = c.bg, bg = c.fg }) -- character under the cursor
lCursor({ fg = c.bg, bg = c.fg }) -- the character under the cursor when |language-mapping| is used (see 'guicursor')
CursorIM({ fg = c.bg, bg = c.fg }) -- like Cursor, but used when in IME mode |CursorIM|
CursorColumn({ bg = c.bg_highlight }) -- Screen-column at the cursor, when 'cursorcolumn' is set.
CursorLine({ bg = c.bg_highlight }) -- Screen-line at the cursor, when 'cursorline' is set.  Low-priority if foreground (ctermfg OR guifg) is not set.
Directory({ fg = c.blue }) -- directory names (and other special names in listings)
DiffAdd({ fg = c.diff.add, bg = colors.none }) -- diff mode: Added line |diff.txt|
DiffChange({ fg = c.diff.change, bg = colors.none }) -- diff mode: Changed line |diff.txt|
DiffDelete({ fg = c.diff.delete, bg = colors.none }) -- diff mode: Deleted line |diff.txt|
DiffModified({ fg = c.diff.change, bg = "NONE" })
DiffText({ bg = c.diff.text }) -- diff mode: Changed text within a changed line |diff.txt|
EndOfBuffer({ fg = c.bg }) -- filler lines (~) after the end of the buffer.  By default, this is highlighted like |hl-NonText|.
-- TermCursor  = { } -- cursor in a focused terminal
-- TermCursorNC= { } -- cursor in an unfocused terminal
ErrorMsg({ fg = c.error }) -- error messages on the command line
VertSplit({ fg = c.border }) -- the column separating vertically split windows
Folded({ fg = c.blue, bg = c.fg_gutter }) -- line used for closed folds
FoldColumn({ bg = c.bg, fg = c.comment }) -- 'foldcolumn'
SignColumn({ bg = config.transparent and c.none or c.bg, fg = c.fg_gutter }) -- column where |signs| are displayed
SignColumnSB({ bg = c.bg_sidebar, fg = c.fg_gutter }) -- column where |signs| are displayed
Substitute({ bg = c.red, fg = c.black }) -- |:substitute| replacement text highlighting
LineNr({ fg = c.fg_gutter }) -- Line number for ":number" and ":#" commands, and when 'number' or 'relativenumber' option is set.
CursorLineNr({ fg = c.dark5 }) -- Like LineNr when 'cursorline' or 'relativenumber' is set for the cursor line.
MatchParen({ fg = c.orange, style = "bold" }) -- The character under the cursor or just before it, if it is a paired bracket, and its match. |pi_paren.txt|
ModeMsg({ fg = c.fg_dark, style = "bold" }) -- 'showmode' message (e.g., "-- INSERT -- ")
MsgArea({ fg = c.fg_dark }) -- Area for messages and cmdline
-- MsgSeparator= { } -- Separator for scrolled messages, `msgsep` flag of 'display'
MoreMsg({ fg = c.blue }) -- |more-prompt|
NonText({ fg = c.dark3 }) -- '@' at the end of the window, characters from 'showbreak' and other characters that do not really exist in the text (e.g., ">" displayed when a double-wide character doesn't fit at the end of the line). See also |hl-EndOfBuffer|.
Normal({ fg = c.fg, bg = config.transparent and c.none or c.bg }) -- normal text
NormalNC({ fg = c.fg, bg = config.transparent and c.none or c.bg }) -- normal text in non-current windows
NormalSB({ fg = c.fg_sidebar, bg = c.bg_sidebar }) -- normal text in non-current windows
NormalFloat({ fg = c.fg, bg = c.bg_float }) -- Normal text in floating windows.
FloatBorder({ fg = c.border_highlight, bg = c.bg_float })
Pmenu({ bg = c.bg_popup, fg = c.fg }) -- Popup menu: normal item.
PmenuSel({ bg = util.darken(c.fg_gutter, 0.8) }) -- Popup menu: selected item.
PmenuSbar({ bg = util.lighten(c.bg_popup, 0.95) }) -- Popup menu: scrollbar.
PmenuThumb({ bg = c.fg_gutter }) -- Popup menu: Thumb of the scrollbar.
Question({ fg = c.blue }) -- |hit-enter| prompt and yes/no questions
QuickFixLine({ bg = c.bg_visual, style = "bold" }) -- Current |quickfix| item in the quickfix window. Combined with |hl-CursorLine| when the cursor is there.
Search({ bg = c.bg_search, fg = c.fg }) -- Last search pattern highlighting (see 'hlsearch').  Also used for similar items that need to stand out.
IncSearch({ bg = c.orange, fg = c.black }) -- 'incsearch' highlighting; also used for the text replaced with ":s///c"
SpecialKey({ fg = c.dark3 }) -- Unprintable characters: text displayed differently from what it really is.  But not 'listchars' whitespace. |hl-Whitespace|
SpellBad({ sp = c.error, style = "undercurl" }) -- Word that is not recognized by the spellchecker. |spell| Combined with the highlighting used otherwise.
SpellCap({ sp = c.warning, style = "undercurl" }) -- Word that should start with a capital. |spell| Combined with the highlighting used otherwise.
SpellLocal({ sp = c.info, style = "undercurl" }) -- Word that is recognized by the spellchecker as one that is used in another region. |spell| Combined with the highlighting used otherwise.
SpellRare({ sp = c.hint, style = "undercurl" }) -- Word that is recognized by the spellchecker as one that is hardly ever used.  |spell| Combined with the highlighting used otherwise.
StatusLine({ fg = c.fg_sidebar, bg = c.bg_statusline }) -- status line of current window
StatusLineNC({ fg = c.fg_gutter, bg = c.bg_statusline }) -- status lines of not-current windows Note: if this is equal to "StatusLine" Vim will use "^^^" in the status line of the current window.
TabLine({ bg = c.bg_statusline, fg = c.fg_gutter }) -- tab pages line, not active tab page label
TabLineFill({ bg = c.black }) -- tab pages line, where there are no labels
TabLineSel({ fg = c.black, bg = c.blue }) -- tab pages line, active tab page label
Title({ fg = c.blue, style = "bold" }) -- titles for output from ":set all", ":autocmd" etc.
Visual({ bg = c.bg_visual }) -- Visual mode selection
VisualNOS({ bg = c.bg_visual }) -- Visual mode selection when vim is "Not Owning the Selection".
WarningMsg({ fg = c.warning }) -- warning messages
Whitespace({ fg = c.fg_gutter }) -- "nbsp", "space", "tab" and "trail" in 'listchars'
WildMenu({ bg = c.bg_visual }) -- current match in 'wildmenu' completion

-- These groups are not listed as default vim groups,
-- but they are defacto standard group names for syntax highlighting.
-- commented out groups should chain up to their "preferred" group by
-- default,
-- Uncomment and edit if you want more specific syntax highlighting.

Constant({ fg = c.orange }) -- (preferred) any constant
String({ fg = c.yellow }) --   a string constant: "this is a string"
Character({ fg = c.green }) --  a character constant: 'c', '\n'
-- Number        = { } --   a number constant: 234, 0xff
-- Boolean       = { } --  a boolean constant: TRUE, false
-- Float         = { } --    a floating point constant: 2.3e10

Identifier({ fg = c.magenta, style = config.variableStyle }) -- (preferred) any variable name
Function({ fg = c.blue, style = config.functionStyle }) -- function name (also: methods for classes)

Statement({ fg = c.magenta }) -- (preferred) any statement
-- Conditional   = { } --  if, then, else, endif, switch, etc.
-- Repeat        = { } --   for, do, while, etc.
-- Label         = { } --    case, default, etc.
Operator({ fg = c.blue5 }) -- "sizeof", "+", "*", etc.
Keyword({ fg = c.cyan, style = config.keywordStyle }) --  any other keyword
-- Exception     = { } --  try, catch, throw

PreProc({ fg = c.cyan }) -- (preferred) generic Preprocessor
-- Include       = { } --  preprocessor #include
-- Define        = { } --   preprocessor #define
-- Macro         = { } --    same as Define
-- PreCondit     = { } --  preprocessor #if, #else, #endif, etc.

Type({ fg = c.blue1 }) -- (preferred) int, long, char, etc.
-- StorageClass  = { } -- static, register, volatile, etc.
-- Structure     = { } --  struct, union, enum, etc.
-- Typedef       = { } --  A typedef

Special({ fg = c.blue1 }) -- (preferred) any special symbol
-- SpecialChar   = { } --  special character in a constant
-- Tag           = { } --    you can use CTRL-] on this
-- Delimiter     = { } --  character that needs attention
-- SpecialComment= { } -- special things inside a comment
-- Debug         = { } --    debugging statements

Underlined({ style = "underline" }) -- (preferred) text that stands out, HTML links
Bold({ style = "bold" })
Italic({ style = "italic" })

-- ("Ignore", below, may be invisible...)
-- Ignore = { } -- (preferred) left blank, hidden  |hl-Ignore|

Error({ fg = c.error }) -- (preferred) any erroneous construct
Todo({ bg = c.yellow, fg = c.bg }) -- (preferred) anything that needs extra attention; mostly the keywords TODO FIXME and XXX

qfLineNr({ fg = c.dark5 })
qfFileName({ fg = c.blue })

htmlH1({ fg = c.magenta, style = "bold" })
htmlH2({ fg = c.blue, style = "bold" })

-- mkdHeading = { fg = c.orange, style = "bold" }
-- mkdCode = { bg = c.terminal_black, fg = c.fg }
mkdCodeDelimiter({ bg = c.terminal_black, fg = c.fg })
mkdCodeStart({ fg = c.teal, style = "bold" })
mkdCodeEnd({ fg = c.teal, style = "bold" })
-- mkdLink = { fg = c.blue, style = "underline" }

markdownHeadingDelimiter({ fg = c.orange, style = "bold" })
markdownCode({ fg = c.teal })
markdownCodeBlock({ fg = c.teal })
markdownH1({ fg = c.magenta, style = "bold" })
markdownH2({ fg = c.blue, style = "bold" })
markdownLinkText({ fg = c.blue, style = "underline" })

debugPC({ bg = c.bg_sidebar }) -- used for highlighting the current line in terminal-debug
debugBreakpoint({ bg = util.darken(c.info, 0.1), fg = c.info }) -- used for breakpoint colors in terminal-debug

-- These groups are for the native LSP client. Some other LSP clients may
-- use these groups, or use their own. Consult your LSP client's
-- documentation.
LspReferenceText({ bg = c.fg_gutter }) -- used for highlighting "text" references
LspReferenceRead({ bg = c.fg_gutter }) -- used for highlighting "read" references
LspReferenceWrite({ bg = c.fg_gutter }) -- used for highlighting "write" references

DiagnosticError({ fg = c.error }) -- Used as the base highlight group. Other Diagnostic highlights link to this by default
DiagnosticWarn({ fg = c.warning }) -- Used as the base highlight group. Other Diagnostic highlights link to this by default
DiagnosticInfo({ fg = c.info }) -- Used as the base highlight group. Other Diagnostic highlights link to this by default
DiagnosticHint({ fg = c.hint }) -- Used as the base highlight group. Other Diagnostic highlights link to this by default

DiagnosticVirtualTextError({ bg = util.darken(c.error, 0.1), fg = c.error }) -- Used for "Error" diagnostic virtual text
DiagnosticVirtualTextWarn({ bg = util.darken(c.warning, 0.1), fg = c.warning }) -- Used for "Warning" diagnostic virtual text
DiagnosticVirtualTextInfo({ bg = util.darken(c.info, 0.1), fg = c.info }) -- Used for "Information" diagnostic virtual text
DiagnosticVirtualTextHint({ bg = util.darken(c.hint, 0.1), fg = c.hint }) -- Used for "Hint" diagnostic virtual text

DiagnosticUnderlineError({ style = "undercurl", sp = c.error }) -- Used to underline "Error" diagnostics
DiagnosticUnderlineWarn({ style = "undercurl", sp = c.warning }) -- Used to underline "Warning" diagnostics
DiagnosticUnderlineInfo({ style = "undercurl", sp = c.info }) -- Used to underline "Information" diagnostics
DiagnosticUnderlineHint({ style = "undercurl", sp = c.hint }) -- Used to underline "Hint" diagnostics

LspSignatureActiveParameter({ fg = c.orange })
LspCodeLens({ fg = c.comment })

ALEErrorSign({ fg = c.error })
ALEWarningSign({ fg = c.warning })
